version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: medfayda-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-medfayda}
      POSTGRES_USER: ${DB_USER:-medfayda_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fayda2017}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ../database/seeds:/docker-entrypoint-initdb.d/seeds:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - medfayda-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-medfayda_user} -d ${DB_NAME:-medfayda}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (for sessions and caching)
  redis:
    image: redis:7-alpine
    container_name: medfayda-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - medfayda-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API Server
  api:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: medfayda-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-5000}
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-medfayda}
      DB_USER: ${DB_USER:-medfayda_user}
      DB_PASSWORD: ${DB_PASSWORD:-fayda2017}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "${PORT:-5000}:5000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medfayda-network
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Application
  web:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.web
    container_name: medfayda-web
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - api
    networks:
      - medfayda-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: medfayda-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - web
    networks:
      - medfayda-network
    profiles:
      - production

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: medfayda-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-fayda2017}
    volumes:
      - backup_data:/backups
      - ../scripts/backup.sh:/backup.sh:ro
    depends_on:
      - database
    networks:
      - medfayda-network
    profiles:
      - backup
    command: /backup.sh

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local
  nginx_logs:
    driver: local
  backup_data:
    driver: local

networks:
  medfayda-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
